/**
 */
package eu.cactosfp7.optimisationplan.provider;

import eu.cactosfp7.optimisationplan.util.OptimisationplanAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OptimisationplanItemProviderAdapterFactory extends OptimisationplanAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OptimisationplanItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.SequentialSteps} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequentialStepsItemProvider sequentialStepsItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.SequentialSteps}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequentialStepsAdapter() {
		if (sequentialStepsItemProvider == null) {
			sequentialStepsItemProvider = new SequentialStepsItemProvider(this);
		}

		return sequentialStepsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.ParallelSteps} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelStepsItemProvider parallelStepsItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.ParallelSteps}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelStepsAdapter() {
		if (parallelStepsItemProvider == null) {
			parallelStepsItemProvider = new ParallelStepsItemProvider(this);
		}

		return parallelStepsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.OptimisationPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptimisationPlanItemProvider optimisationPlanItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.OptimisationPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptimisationPlanAdapter() {
		if (optimisationPlanItemProvider == null) {
			optimisationPlanItemProvider = new OptimisationPlanItemProvider(this);
		}

		return optimisationPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.OptimisationPlanRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptimisationPlanRepositoryItemProvider optimisationPlanRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.OptimisationPlanRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptimisationPlanRepositoryAdapter() {
		if (optimisationPlanRepositoryItemProvider == null) {
			optimisationPlanRepositoryItemProvider = new OptimisationPlanRepositoryItemProvider(this);
		}

		return optimisationPlanRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.VmPlacementAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VmPlacementActionItemProvider vmPlacementActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.VmPlacementAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVmPlacementActionAdapter() {
		if (vmPlacementActionItemProvider == null) {
			vmPlacementActionItemProvider = new VmPlacementActionItemProvider(this);
		}

		return vmPlacementActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.VmMigrationAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VmMigrationActionItemProvider vmMigrationActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.VmMigrationAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVmMigrationActionAdapter() {
		if (vmMigrationActionItemProvider == null) {
			vmMigrationActionItemProvider = new VmMigrationActionItemProvider(this);
		}

		return vmMigrationActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.StopVmAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopVmActionItemProvider stopVmActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.StopVmAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopVmActionAdapter() {
		if (stopVmActionItemProvider == null) {
			stopVmActionItemProvider = new StopVmActionItemProvider(this);
		}

		return stopVmActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.LogicalMemoryScalingAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalMemoryScalingActionItemProvider logicalMemoryScalingActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.LogicalMemoryScalingAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalMemoryScalingActionAdapter() {
		if (logicalMemoryScalingActionItemProvider == null) {
			logicalMemoryScalingActionItemProvider = new LogicalMemoryScalingActionItemProvider(this);
		}

		return logicalMemoryScalingActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.LogicalStorageScalingAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalStorageScalingActionItemProvider logicalStorageScalingActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.LogicalStorageScalingAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalStorageScalingActionAdapter() {
		if (logicalStorageScalingActionItemProvider == null) {
			logicalStorageScalingActionItemProvider = new LogicalStorageScalingActionItemProvider(this);
		}

		return logicalStorageScalingActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.PhysicalFrequencyScalingAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalFrequencyScalingActionItemProvider physicalFrequencyScalingActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.PhysicalFrequencyScalingAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalFrequencyScalingActionAdapter() {
		if (physicalFrequencyScalingActionItemProvider == null) {
			physicalFrequencyScalingActionItemProvider = new PhysicalFrequencyScalingActionItemProvider(this);
		}

		return physicalFrequencyScalingActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.StartVmAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartVmActionItemProvider startVmActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.StartVmAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartVmActionAdapter() {
		if (startVmActionItemProvider == null) {
			startVmActionItemProvider = new StartVmActionItemProvider(this);
		}

		return startVmActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.SuspendVmAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuspendVmActionItemProvider suspendVmActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.SuspendVmAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuspendVmActionAdapter() {
		if (suspendVmActionItemProvider == null) {
			suspendVmActionItemProvider = new SuspendVmActionItemProvider(this);
		}

		return suspendVmActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.ManagePhysicalNodeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManagePhysicalNodeActionItemProvider managePhysicalNodeActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.ManagePhysicalNodeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManagePhysicalNodeActionAdapter() {
		if (managePhysicalNodeActionItemProvider == null) {
			managePhysicalNodeActionItemProvider = new ManagePhysicalNodeActionItemProvider(this);
		}

		return managePhysicalNodeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.VirtualCoresScalingAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualCoresScalingActionItemProvider virtualCoresScalingActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.VirtualCoresScalingAction}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualCoresScalingActionAdapter() {
		if (virtualCoresScalingActionItemProvider == null) {
			virtualCoresScalingActionItemProvider = new VirtualCoresScalingActionItemProvider(this);
		}

		return virtualCoresScalingActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.StartApplication} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected StartApplicationItemProvider startApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.StartApplication}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartApplicationAdapter() {
		if (startApplicationItemProvider == null) {
			startApplicationItemProvider = new StartApplicationItemProvider(this);
		}

		return startApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.StopApplication} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected StopApplicationItemProvider stopApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.StopApplication}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopApplicationAdapter() {
		if (stopApplicationItemProvider == null) {
			stopApplicationItemProvider = new StopApplicationItemProvider(this);
		}

		return stopApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.ScaleOut} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected ScaleOutItemProvider scaleOutItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.ScaleOut}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScaleOutAdapter() {
		if (scaleOutItemProvider == null) {
			scaleOutItemProvider = new ScaleOutItemProvider(this);
		}

		return scaleOutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.ScaleIn} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected ScaleInItemProvider scaleInItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.ScaleIn}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScaleInAdapter() {
		if (scaleInItemProvider == null) {
			scaleInItemProvider = new ScaleInItemProvider(this);
		}

		return scaleInItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.StartWhiteBoxApplication} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected StartWhiteBoxApplicationItemProvider startWhiteBoxApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.StartWhiteBoxApplication}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartWhiteBoxApplicationAdapter() {
		if (startWhiteBoxApplicationItemProvider == null) {
			startWhiteBoxApplicationItemProvider = new StartWhiteBoxApplicationItemProvider(this);
		}

		return startWhiteBoxApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.StartGreyBoxApplication} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected StartGreyBoxApplicationItemProvider startGreyBoxApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.StartGreyBoxApplication}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartGreyBoxApplicationAdapter() {
		if (startGreyBoxApplicationItemProvider == null) {
			startGreyBoxApplicationItemProvider = new StartGreyBoxApplicationItemProvider(this);
		}

		return startGreyBoxApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.StartBlackBoxApplication} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected StartBlackBoxApplicationItemProvider startBlackBoxApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.StartBlackBoxApplication}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartBlackBoxApplicationAdapter() {
		if (startBlackBoxApplicationItemProvider == null) {
			startBlackBoxApplicationItemProvider = new StartBlackBoxApplicationItemProvider(this);
		}

		return startBlackBoxApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.ConnectVmAction} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectVmActionItemProvider connectVmActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.ConnectVmAction}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectVmActionAdapter() {
		if (connectVmActionItemProvider == null) {
			connectVmActionItemProvider = new ConnectVmActionItemProvider(this);
		}

		return connectVmActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.optimisationplan.ResourceControlAction} instances.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceControlActionItemProvider resourceControlActionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.optimisationplan.ResourceControlAction}.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceControlActionAdapter() {
		if (resourceControlActionItemProvider == null) {
			resourceControlActionItemProvider = new ResourceControlActionItemProvider(this);
		}

		return resourceControlActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sequentialStepsItemProvider != null)
			sequentialStepsItemProvider.dispose();
		if (parallelStepsItemProvider != null)
			parallelStepsItemProvider.dispose();
		if (optimisationPlanItemProvider != null)
			optimisationPlanItemProvider.dispose();
		if (optimisationPlanRepositoryItemProvider != null)
			optimisationPlanRepositoryItemProvider.dispose();
		if (vmPlacementActionItemProvider != null)
			vmPlacementActionItemProvider.dispose();
		if (vmMigrationActionItemProvider != null)
			vmMigrationActionItemProvider.dispose();
		if (stopVmActionItemProvider != null)
			stopVmActionItemProvider.dispose();
		if (logicalMemoryScalingActionItemProvider != null)
			logicalMemoryScalingActionItemProvider.dispose();
		if (logicalStorageScalingActionItemProvider != null)
			logicalStorageScalingActionItemProvider.dispose();
		if (physicalFrequencyScalingActionItemProvider != null)
			physicalFrequencyScalingActionItemProvider.dispose();
		if (startVmActionItemProvider != null)
			startVmActionItemProvider.dispose();
		if (suspendVmActionItemProvider != null)
			suspendVmActionItemProvider.dispose();
		if (managePhysicalNodeActionItemProvider != null)
			managePhysicalNodeActionItemProvider.dispose();
		if (virtualCoresScalingActionItemProvider != null)
			virtualCoresScalingActionItemProvider.dispose();
		if (startApplicationItemProvider != null)
			startApplicationItemProvider.dispose();
		if (stopApplicationItemProvider != null)
			stopApplicationItemProvider.dispose();
		if (scaleOutItemProvider != null)
			scaleOutItemProvider.dispose();
		if (scaleInItemProvider != null)
			scaleInItemProvider.dispose();
		if (startWhiteBoxApplicationItemProvider != null)
			startWhiteBoxApplicationItemProvider.dispose();
		if (startGreyBoxApplicationItemProvider != null)
			startGreyBoxApplicationItemProvider.dispose();
		if (startBlackBoxApplicationItemProvider != null)
			startBlackBoxApplicationItemProvider.dispose();
		if (connectVmActionItemProvider != null)
			connectVmActionItemProvider.dispose();
		if (resourceControlActionItemProvider != null)
			resourceControlActionItemProvider.dispose();
	}

}
